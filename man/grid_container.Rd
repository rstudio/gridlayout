% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_container.R
\name{grid_container}
\alias{grid_container}
\title{Build gridlayout container for specified layout}
\usage{
grid_container(
  id = "grid-container",
  layout,
  elements,
  container_height = "100\%",
  use_bslib_card_styles = FALSE
)
}
\arguments{
\item{id}{ID unique to this container (note that the HTML will be prefixed
with \verb{grid-} to avoid namespace clashes)}

\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{elements}{Named list of the UI definitions that will be used to fill
all cells. Names must match those provided in \code{layout}.}

\item{container_height}{How tall should the grid-containing element be? If
set to \code{"viewport"} then the container will take up the entire available
vertical space (equivalent to the CSS value of \verb{100vh}). For nested grids a
value of \code{"100\%"} will enable the the nested grid to take up the full
vertical space provided by its parent container. Any other css size unit is
also valid such as \code{"400px"} or \code{"100\%"}.}

\item{use_bslib_card_styles}{Should the elements within the grid be given the
current bootstrap theme's card styling? Note that this setting will
override card styling for elements built with \link{\code{grid_panel()}}.
This is so you don't have to manually change styles for each card. If you
want a mixture of card styles, then you'll need to leave this as \code{FALSE}
and set styles manually on each panel.}
}
\value{
A taglist with grid elements wrapped inside a container div of class
\code{id}.
}
\description{
Builds a gridlayout within a div of specified id. Not typically called
directly but can be used to create nested grids
}
\examples{

if (interactive()) {
library(gridlayout)
library(shiny)
requireNamespace("bslib", quietly = TRUE)
my_layout <- "
|      |        |       |
|------|--------|-------|
|2rem  |200px   |1fr    |
|150px |header  |header |
|1fr   |sidebar |plot   |"

# The classic Geyser app with grid layout
shinyApp(
  ui = fluidPage(
    theme = bslib::bs_theme(),
    grid_container(
      id = "main_grid",
      layout = my_layout,
      elements = list(
        header = h2(id = "header", "This is my header content"),
        sidebar = sliderInput("bins","Number of bins:", min = 1, max = 50, value = 30),
        plot = plotOutput("distPlot", height = "100\%")
      ),
      container_height = "800px"
    )
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}

}
