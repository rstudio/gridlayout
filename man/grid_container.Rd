% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_container.R
\name{grid_container}
\alias{grid_container}
\title{\code{gridlayout} container for use within other elements}
\usage{
grid_container(
  layout,
  ...,
  id = NULL,
  flag_mismatches = TRUE,
  row_sizes = NULL,
  col_sizes = NULL,
  gap_size = NULL
)
}
\arguments{
\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{...}{\code{grid_card()} (or similar) arguments that will fill the grid
layout. Note the areas should match the those provided in \code{layout}.}

\item{id}{ID unique to this container (note that the HTML will be prefixed
with \verb{grid-} to avoid namespace clashes)}

\item{flag_mismatches}{Should a mismatch between supplied \code{elements} ui
definitions and layout trigger a warning? In advanced cases you may want to
dynamically set your layout and sometimes omit panels.}

\item{row_sizes}{A character vector of valid css sizes for the height of each
row in your grid as given by the main layout definition. If a single value
is passed, it will be repeated for all columns. If sizes are provided both
here and in the main layout then these sizes will be the ones used.}

\item{col_sizes}{Same as \code{row_sizes}, but for column widths}

\item{gap_size}{Valid css sizing for gap to be left between each element in your
grid. Like \code{row_sizes} and \code{col_sizes}, this will win-out over a gap size
provided in the main layout table.}
}
\value{
A taglist with grid elements wrapped inside a container div of class
\code{id}.
}
\description{
Builds a gridlayout within a div of specified id. Not typically called
directly but can be used to create nested grids
}
\examples{

if (FALSE) {
library(gridlayout)
library(shiny)

# The classic Geyser app with grid layout
shinyApp(
  ui = fluidPage(
    grid_container(
      layout = "
        |2rem  |200px   |1fr    |
        |85px  |header  |header |
        |1fr   |sidebar |plot   |",
      grid_card_text("header", "Geysers!"),
      grid_card(
        "sidebar",
         card_header("Settings"),
        sliderInput("bins", "Number of bins:",
           min = 1,
           max = 50,
           value = 30,
           width = "100\%")
      ),
      grid_card_plot("plot", outputId = "distPlot")
    )
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}

}
\seealso{
\code{\link[=grid_page]{grid_page()}} for using a gridlayout to entirely define the page.
\code{\link[=grid_nested]{grid_nested()}} for placing a grid container within another gridlayout.
\code{\link[=grid_card]{grid_card()}} for placing content inside your layout. See
\code{vignette("defining-a-layout", package = "gridlayout")} for more info on
defining your layout.
}
