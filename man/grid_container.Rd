% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_container.R
\name{grid_container}
\alias{grid_container}
\title{Build gridlayout container for specified layout}
\usage{
grid_container(
  layout,
  ...,
  id = NULL,
  use_bslib_card_styles = FALSE,
  flag_mismatches = TRUE,
  row_sizes = NULL,
  col_sizes = NULL,
  gap_size = NULL
)
}
\arguments{
\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{...}{\code{grid_panel()} (or similar) arguments that will fill the grid
layout. Note the areas should match the those provided in \code{layout}.}

\item{id}{ID unique to this container (note that the HTML will be prefixed
with \verb{grid-} to avoid namespace clashes)}

\item{use_bslib_card_styles}{Should the elements within the grid be given the
current bootstrap theme's card styling? Note that this setting will
override card styling for elements built with \link{grid_panel}. This is so you
don't have to manually change styles for each card. If you want a mixture
of card styles, then you'll need to leave this as \code{FALSE} and set styles
manually on each panel.}

\item{flag_mismatches}{Should a mismatch between supplied \code{elements} ui
definitions and layout trigger a warning? In advanced cases you may want to
dynamically set your layout and sometimes omit panels.}
}
\value{
A taglist with grid elements wrapped inside a container div of class
\code{id}.
}
\description{
Builds a gridlayout within a div of specified id. Not typically called
directly but can be used to create nested grids
}
\examples{

if (FALSE) {
library(gridlayout)
library(shiny)

# The classic Geyser app with grid layout
shinyApp(
  ui = fluidPage(
    grid_container(
      layout = "
        |2rem  |200px   |1fr    |
        |85px  |header  |header |
        |1fr   |sidebar |plot   |",
      text_panel("header", "Geysers!"),
      grid_panel(
        "sidebar",
        title = "Settings",
        sliderInput("bins","Number of bins:", min = 1, max = 50, value = 30, width = "100\%")
      ),
      grid_panel(
        "plot",
        plotOutput("distPlot", height="100\%")
      )
    )
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}

}
\seealso{
\link{grid_page}, \link{grid_panel}
}
