% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_page.R
\name{grid_page}
\alias{grid_page}
\title{Setup gridlayout UI for shiny app}
\usage{
grid_page(
  layout,
  ...,
  use_bslib_card_styles = FALSE,
  theme = NULL,
  flag_mismatches = TRUE
)
}
\arguments{
\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{...}{Contents of each grid element.  Every grid element argument must
be named. If a named argument doesn't match the layout's declared elements
than an error will be thrown. This behavior can be overridden using the
\code{flag_mismatches} argument. Any unnamed arguments are added to the page
after the container. This can be used to do things like things to the
\code{head} or \code{meta} sections of the page.}

\item{use_bslib_card_styles}{Should the elements within the grid be given the
current bootstrap theme's card styling? Note that this setting will
override card styling for elements built with \link{grid_panel}. This is so you
don't have to manually change styles for each card. If you want a mixture
of card styles, then you'll need to leave this as \code{FALSE} and set styles
manually on each panel.}

\item{theme}{Optional argument to pass to \code{theme} argument of
\code{\link[shiny]{fluidPage}}.}

\item{flag_mismatches}{Should mismatches between the named arguments and
layout elements trigger an error?}
}
\value{
A UI definition that can be passed to the
\code{\link[shiny]{shinyUI}} function.
}
\description{
This is the typical way to use \code{gridlayout} in your \code{Shiny} app. \code{grid_page}
will make up the entire \code{ui} declaration of the app. Under the hood it uses
\code{\link[shiny:fluidPage]{shiny::fluidPage()}} and \link{grid_container}. Elements of the layout are
declared as named parameters which will then be matched to the provided
\code{layout}. For instance the contents of the header (as defined in \code{layout})
would be set with \code{header = title_panel("App Title")}.
}
\examples{
# Only run these examples in interactive R sessions
if (FALSE) {
requireNamespace("shiny", quietly = TRUE)
requireNamespace("bslib", quietly = TRUE)

library(shiny)
my_layout <- "
|      |        |       |
|------|--------|-------|
|2rem  |200px   |1fr    |
|150px |header  |header |
|1fr   |sidebar |plot   |"

# The classic Geyser app with grid layout
shinyApp(
  ui = grid_page(
    layout = my_layout,
    theme = bslib::bs_theme(),
    header = title_panel("Old Faithful Geyser Data"),
    sidebar = sliderInput("bins","Number of bins:", min = 1, max = 50, value = 30),
    plot = plotOutput("distPlot", height = "100\%")
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}
}
\seealso{
\link{grid_container}
}
