% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_page.R
\name{grid_page}
\alias{grid_page}
\title{Setup gridlayout UI for shiny app}
\usage{
grid_page(layout, ..., theme, .verify_matches = TRUE)
}
\arguments{
\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{...}{Contents of each grid element. For instance the contents of the
header (as defined in \code{layout}) would be set with \code{header = h2("App Title")}.}

\item{theme}{Optional argument to pass to \code{theme} argument of \code{\link[shiny]{fluidPage}}.}
}
\value{
A UI definition that can be passed to the \code{\link[shiny]{shinyUI}} function.
}
\description{
Setup gridlayout UI for shiny app
}
\examples{
# Only run these examples in interactive R sessions
if (interactive()) {

my_layout <- "
|      |        |         |
|------|--------|---------|
|2rem  |200px   |1fr      |
|150px |header  |header   |
|1fr   |sidebar |distPlot |"

# The classic Geyser app with grid layout
shinyApp(
  ui = grid_page(
    layout = my_layout,
    theme = bslib::bs_theme(),
    header = h2(id = "header", "This is my header content"),
    sidebar = sliderInput("bins","Number of bins:", min = 1, max = 50, value = 30),
    plot = plotOutput("distPlot", height = "100\%")
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)

}
}
\seealso{
grid_container
}
