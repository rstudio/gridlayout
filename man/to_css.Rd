% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_css.R
\name{to_css}
\alias{to_css}
\title{Convert grid layout to css string}
\usage{
to_css(layout, container_key, is_card_styled = "grid_panel")
}
\arguments{
\item{layout}{Object of class \code{"gridlayout"}.}

\item{container_key}{The unique key used to identify the container to be
targeted for the layout. If left blank it will default to applying grid
styling to the whole app (aka the \code{body} element) for whole page grids. If
plain character string is given, then it is assumed to be a
\code{gridlayout-key} and the targeting is done using an attribute query for
\code{data-gridlayout-key}. If container contains css selector characters such as
a dot, the selector will not be transformed into an id automatically. E.g.
\code{container = ".main-content"}.}

\item{is_card_styled}{Should each section of the grid be given a card style
to make it stand out? Options are \code{"grid_panel"}, where only elements with
\code{"grid_panel"} class will get card styling, \code{"all"} where all children of
the grid container will get card styling (useful for RMarkdown or other
situations where you don't control child rendering) or \code{"none"} for no card
styling.}

\item{selector_prefix}{CSS prefix used to target grid elements. This will
change if you're integrating grid with a system that you don't want to use
ids (the \code{"#"} prefix) with because they are not available or are used for
other reasons.}
}
\value{
Character string of css used to setup grid layout and place elements
(referenced by id) into correct locations
}
\description{
Convert grid layout to css string
}
\examples{

grid_obj <- md_to_gridlayout(
  layout_table = "
    |      |120px   |1fr    |1fr    |
    |:-----|:-------|:------|:------|
    |100px |header  |header |header |
    |1fr   |sidebar |plot_a |plot_c |
    |1fr   |sidebar |plot_b |plot_b |"
)

cat(to_css(grid_obj))
}
