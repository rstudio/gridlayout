% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_css.R
\name{use_gridlayout}
\alias{use_gridlayout}
\title{Convert layout to css for Shiny}
\usage{
use_gridlayout(layout_def, container, debug_mode)
}
\arguments{
\item{layout_def}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a `gridlayout` object defining the
desired layout for your Shiny app.}

\item{container}{Id of the element for grid to be placed in. Default value to
apply grid styling to the whole app (aka the `body` element) for whole page
grids}

\item{debug_mode}{If set to `TRUE` then each element of the grid will have an
outline applied so positioning can more easily be assessed.}
}
\value{
Character string of css used to setup grid layout and place elements
  (referenced by id) into correct locations
}
\description{
This simply wraps the output of `to_css()` in a `style` tag and escapes HTML
characters to simplify using in Shiny
}
\examples{
# Only run these examples in interactive R sessions
if (interactive()) {

my_layout <- "
|      |        |         |
|------|--------|---------|
|2rem  |200px   |1fr      |
|100px |header  |header   |
|1fr   |sidebar |distPlot |"

# The classic Geyser app with grid layout
shinyApp(
  ui = fluidPage(
    use_gridlayout(my_layout, "app-container", debug_mode = TRUE),
    div(
      id = "app-container",
      div(id = "header",
          h2(id = "app-title", "Old Faithful Geyser Data")
      ),
      div(id = "sidebar",
          sliderInput("bins","Number of bins:",
                      min = 1, max = 50, value = 30)
      ),
      plotOutput("distPlot")
    )
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}
}
