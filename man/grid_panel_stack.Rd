% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_panel_stack.R
\name{grid_panel_stack}
\alias{grid_panel_stack}
\title{Grid panel with vertically stacked elements}
\usage{
grid_panel_stack(
  area,
  ...,
  item_alignment = "top",
  title = NULL,
  collapsible = TRUE,
  scrollable = FALSE,
  item_gap = "10px"
)
}
\arguments{
\item{area}{Name of grid area, should match an area defined in the layout
section of the wrapping \code{grid_page()} or \code{grid_container()}.}

\item{...}{Elements to include within the panel}

\item{item_alignment}{How should the items within the panel be aligned.
Defaults to stacking downward from the top. Options include \code{"top"},
\code{"centered"}, \code{"bottom"}, or \code{"spread"} (items are distributed evenly among
vertical space).}

\item{title}{Character string to go across top of panel with label. If left
blank the card contents will take up entire space.}

\item{collapsible}{Should the card be able to be collapsed (\code{TRUE} or
\code{FALSE})? Gridlayout will only show collapser if the layout allows it
(panel is entirely positioned within "auto" sized rows, and has a title).
Setting this to \code{FALSE} will mean collapsibility of the panel will never be
enabled, regardless of layout.}

\item{scrollable}{Should scroll-bars be added so content that is larger than
the panel can be seen?}

\item{item_gap}{How much space should there be between consecutive items?}
}
\value{
Elements from \code{...} wrapped in a \code{shiny::div()} with styles for
vertical stacking applied.
}
\description{
Contain a series of ui elements with each vertically stacked on top of
eachother. Internally uses css flexbox to align items.
}
\examples{

# Simply a wrapper for shiny::div(...)
grid_panel_stack(
  area="header",
  shiny::h2("R"),
  shiny::actionButton("myButton", "Click Me")
)

}
\seealso{
\link{grid_panel}
}
