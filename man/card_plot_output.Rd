% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_plot.R
\name{card_plot_output}
\alias{card_plot_output}
\title{Card-container plot output}
\usage{
card_plot_output(
  outputId,
  click = NULL,
  dblclick = NULL,
  hover = NULL,
  brush = NULL,
  height = NULL,
  stretch = TRUE,
  ...
)
}
\arguments{
\item{outputId}{output variable to read the plot/image from.}

\item{click}{This can be \code{NULL} (the default), a string, or an object
created by the \code{\link[shiny:clickOpts]{clickOpts()}} function. If you use a value like
\code{"plot_click"} (or equivalently, \code{clickOpts(id="plot_click")}),
the plot will send coordinates to the server whenever it is clicked, and
the value will be accessible via \code{input$plot_click}. The value will be
a named list  with \code{x} and \code{y} elements indicating the mouse
position.}

\item{dblclick}{This is just like the \code{click} argument, but for
double-click events.}

\item{hover}{Similar to the \code{click} argument, this can be \code{NULL}
(the default), a string, or an object created by the
\code{\link[shiny:clickOpts]{hoverOpts()}} function. If you use a value like
\code{"plot_hover"} (or equivalently, \code{hoverOpts(id="plot_hover")}),
the plot will send coordinates to the server pauses on the plot, and the
value will be accessible via \code{input$plot_hover}. The value will be a
named list with \code{x} and \code{y} elements indicating the mouse
position. To control the hover time or hover delay type, you must use
\code{\link[shiny:clickOpts]{hoverOpts()}}.}

\item{brush}{Similar to the \code{click} argument, this can be \code{NULL}
(the default), a string, or an object created by the
\code{\link[shiny:brushOpts]{brushOpts()}} function. If you use a value like
\code{"plot_brush"} (or equivalently, \code{brushOpts(id="plot_brush")}),
the plot will allow the user to "brush" in the plotting area, and will send
information about the brushed area to the server, and the value will be
accessible via \code{input$plot_brush}. Brushing means that the user will
be able to draw a rectangle in the plotting area and drag it around. The
value will be a named list with \code{xmin}, \code{xmax}, \code{ymin}, and
\code{ymax} elements indicating the brush area. To control the brush
behavior, use \code{\link[shiny:brushOpts]{brushOpts()}}. Multiple
\code{imageOutput}/\code{plotOutput} calls may share the same \code{id}
value; brushing one image or plot will cause any other brushes with the
same \code{id} to disappear.}

\item{height}{Image width/height. Must be a valid CSS unit (like
\code{"100\%"}, \code{"400px"}, \code{"auto"}) or a number, which will be
coerced to a string and have \code{"px"} appended. These two arguments are
ignored when \code{inline = TRUE}, in which case the width/height of a plot
must be specified in \code{renderPlot()}. Note that, for height, using
\code{"auto"} or \code{"100\%"} generally will not work as expected,
because of how height is computed with HTML/CSS.}

\item{stretch}{Set to \code{TRUE} if this \code{card_body} is eager to use any extra
vertical space is available in the card.}

\item{...}{Named arguments become attributes on the div containing the plot.}

\item{class}{Additional CSS classes to include on the card div.}
}
\description{
A card-aware wrapper of \code{shiny::plotOutput} that has smart defaults for
sizing
}
\seealso{
\link{grid_plot}
}
