% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_card.R
\name{grid_card}
\alias{grid_card}
\title{Grid-positioned card element}
\usage{
grid_card(area, ...)
}
\arguments{
\item{area}{Name of grid area, should match an area defined in the layout
section of the wrapping \code{grid_page()} or \code{grid_container()}.}

\item{...}{
  Arguments passed on to \code{\link[bslib:card]{bslib::card}}
  \describe{
    \item{\code{full_screen}}{If \code{TRUE}, an icon will appear when hovering over the card
body. Clicking the icon expands the card to fit viewport size. Consider
pairing this feature with \code{\link[bslib:card_body_fill]{card_body_fill()}} to get output that responds to
changes in the size of the card.}
    \item{\code{height}}{Any valid \link[htmltools:validateCssUnit]{CSS unit} (e.g.,
\code{height="200px"}).}
    \item{\code{class}}{Additional CSS classes for the returned UI element.}
    \item{\code{wrapper}}{A function (which returns a UI element) to call on unnamed
arguments in \code{...} which are not already card item(s) (like
\code{\link[bslib:card_header]{card_header()}}, \code{\link[bslib:card_body]{card_body()}}, etc.). Note that non-card items are grouped
together into one \code{wrapper} call (e.g. given \code{card("a", "b", card_body("c"), "d")}, \code{wrapper} would be called twice, once with \code{"a"} and
\code{"b"} and once with \code{"d"}). Consider setting \code{wrapper} to \link[bslib]{card_body_fill}
if the entire card wants responsive sizing or \code{NULL} to avoid wrapping
altogether}
  }}
}
\description{
The standard element for placing elements on the grid in a simple card
container
}
\examples{
if (FALSE) {
library(gridlayout)
library(shiny)
library(bslib)

shinyApp(
  ui = grid_page(
    layout = c(
      "header  header",
      "sidebar distPlot"
    ),
    row_sizes = c("50px", "1fr"),
    col_sizes = c("200px", "1fr"),
    grid_card("header", card_body(h2("This is my header"))),
    grid_card(
      area = "sidebar",
      card_header("Settings"),
      card_body(
        sliderInput("bins","Number of bins:", 1, 50, 30, width = "100\%")
      )
    ),
    grid_card_plot("distPlot")
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}
}
\seealso{
\link[bslib:card]{bslib::card} for underlying function. \link[bslib:card_body]{bslib::card_header},
\link[bslib:card_body]{bslib::card_body}, \link[bslib:card_body]{bslib::card_footer}.
\code{\link[=grid_card_text]{grid_card_text()}} for a card with just text content,
\code{\link[=grid_card_plot]{grid_card_plot()}} for a card with just plot content, \code{\link[=grid_place]{grid_place()}} to
place any tag onto the grid without needing to wrap in a card, and
\code{\link[=card_plot_output]{card_plot_output()}} for including a smart-sized plot within a card.
}
