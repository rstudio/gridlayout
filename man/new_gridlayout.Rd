% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/new_gridlayout.R
\name{new_gridlayout}
\alias{new_gridlayout}
\title{Construct a gridlayout object from basic parts}
\usage{
new_gridlayout(
  layout_def = list(),
  col_sizes = NULL,
  row_sizes = NULL,
  gap = NULL,
  container_height = NULL,
  alternate_layouts = NULL
)
}
\arguments{
\item{layout_def}{Either a list of elements with the \code{id}, \code{start_row},
\code{end_row}, \code{start_col}, and \code{end_col} format, or a markdown table defining
a layout.}

\item{col_sizes}{A character vector of valid css sizes for the width of each
column in your grid as given by \code{layout_mat}. If a single value is passed,
it will be repeated for all columns.}

\item{row_sizes}{Same as \code{col_sizes}, but for row heights.}

\item{gap}{Valid css sizing for gap to be left between each element in your
grid. Defaults to \code{"1rem"}. This is a relative unit that scales with the
base text size of a page. E.g. setting font-size: 16px on the body element
of a page means 1rem = 16px;}

\item{container_height}{How tall should the containing element be for this
layout? Defaults to \code{"viewport"} which means the layout will take up the
whole vertical space of the webpage. Values such as \code{"auto"} will let the
page grow to as large as it needs to be to fit all content. This will cause
issues with row heights in relative units, however.}
}
\value{
Object of class \code{"gridlayout"}
}
\description{
Construct a gridlayout object from basic parts
}
\examples{

# Assemble list of elements along with their positions
elements_list <- list(
  list(id = "header", start_row = 1, end_row = 1,
       start_col = 1, end_col = 2),
  list(id = "plot",   start_row = 2, end_row = 2,
       start_col = 1, end_col = 1),
  list(id = "table",  start_row = 2, end_row = 2,
       start_col = 2, end_col = 2),
  list(id = "footer", start_row = 3, end_row = 3,
       start_col = 1, end_col = 2)
)

new_gridlayout(
  elements_list,
  col_sizes = c("1fr", "2fr"),
  row_sizes = c("100px", "1fr", "1fr")
)

# Can also use a matrix for more visually intuitive laying out
new_gridlayout(
  layout_def = "
      | header | header |
      | plota  | plotb  |",
  col_sizes = c("1fr", "2fr"),
  row_sizes = c("100px", "1fr"),
  gap = "2rem"
)

}
