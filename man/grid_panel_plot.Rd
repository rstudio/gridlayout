% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_panel_plot.R
\name{grid_panel_plot}
\alias{grid_panel_plot}
\title{Grid Panel Plot Output}
\usage{
grid_panel_plot(area, outputId = area, width = "100\%", height = "100\%", ...)
}
\arguments{
\item{area}{Name of grid area, should match an area defined in the layout
section of the wrapping \code{grid_page()} or \code{grid_container()}.}

\item{outputId}{Output id of the plot output. Used to link to server code
generating plot. If left unset this will use the same value as the \code{area}
argument.}

\item{width}{Optional width parameter. Defaults to filling entire width of
grid panel}

\item{height}{Optional height parameter. Defaults to filling entire height of
grid panel}

\item{...}{
  Arguments passed on to \code{\link[shiny:plotOutput]{shiny::plotOutput}}
  \describe{
    \item{\code{click}}{This can be \code{NULL} (the default), a string, or an object
created by the \code{\link[shiny:clickOpts]{clickOpts()}} function. If you use a value like
\code{"plot_click"} (or equivalently, \code{clickOpts(id="plot_click")}),
the plot will send coordinates to the server whenever it is clicked, and
the value will be accessible via \code{input$plot_click}. The value will be
a named list  with \code{x} and \code{y} elements indicating the mouse
position.}
    \item{\code{dblclick}}{This is just like the \code{click} argument, but for
double-click events.}
    \item{\code{hover}}{Similar to the \code{click} argument, this can be \code{NULL}
(the default), a string, or an object created by the
\code{\link[shiny:clickOpts]{hoverOpts()}} function. If you use a value like
\code{"plot_hover"} (or equivalently, \code{hoverOpts(id="plot_hover")}),
the plot will send coordinates to the server pauses on the plot, and the
value will be accessible via \code{input$plot_hover}. The value will be a
named list with \code{x} and \code{y} elements indicating the mouse
position. To control the hover time or hover delay type, you must use
\code{\link[shiny:clickOpts]{hoverOpts()}}.}
    \item{\code{brush}}{Similar to the \code{click} argument, this can be \code{NULL}
(the default), a string, or an object created by the
\code{\link[shiny:brushOpts]{brushOpts()}} function. If you use a value like
\code{"plot_brush"} (or equivalently, \code{brushOpts(id="plot_brush")}),
the plot will allow the user to "brush" in the plotting area, and will send
information about the brushed area to the server, and the value will be
accessible via \code{input$plot_brush}. Brushing means that the user will
be able to draw a rectangle in the plotting area and drag it around. The
value will be a named list with \code{xmin}, \code{xmax}, \code{ymin}, and
\code{ymax} elements indicating the brush area. To control the brush
behavior, use \code{\link[shiny:brushOpts]{brushOpts()}}. Multiple
\code{imageOutput}/\code{plotOutput} calls may share the same \code{id}
value; brushing one image or plot will cause any other brushes with the
same \code{id} to disappear.}
    \item{\code{inline}}{use an inline (\code{span()}) or block container (\code{div()})
for the output}
  }}
}
\value{
A grid panel filled with plot output
}
\description{
A light wrapper for \code{shiny::plotOutput()} that uses gridlayout-friendly
sizing defaults.
}
\examples{

if (interactive()) {

shinyApp(
  ui = grid_page(
    layout = c(
      "15px 200px   1fr",
      "85px header  header",
      "1fr  sidebar distPlot"
    ),
    grid_panel_text("header", "This is my header", is_title = TRUE),
    grid_panel(
      "sidebar",
      title = "Settings",
      sliderInput("bins","Number of bins:", min = 1, max = 50, value = 30, width = "100\%")
    ),
    grid_panel_plot("distPlot")
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)

}

}
