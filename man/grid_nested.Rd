% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_nested.R
\name{grid_nested}
\alias{grid_nested}
\title{Grid-positioned card with \code{gridlayout} positioned content}
\usage{
grid_nested(area, layout, ..., id = NULL, title = NULL, flag_mismatches = TRUE)
}
\arguments{
\item{area}{Name of grid area, should match an area defined in the layout
section of the wrapping \code{grid_page()} or \code{grid_container()}.}

\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{...}{Arguments (typically children) passed to the \code{htmltools::div()}
that contain the card's contents}

\item{id}{ID unique to this container (note that the HTML will be prefixed
with \verb{grid-} to avoid namespace clashes)}

\item{title}{Character string to go across top of panel with label. If left
blank the card contents will take up entire space.}

\item{flag_mismatches}{Should a mismatch between supplied \code{elements} ui
definitions and layout trigger a warning? In advanced cases you may want to
dynamically set your layout and sometimes omit panels.}
}
\value{
A \code{grid_card} with a nested layout within it
}
\description{
Creates a panel for a layout with its own internal gridlayout
}
\examples{
# Demonstrating the ability to nest grid layouts within other gridlayouts
library(gridlayout)
library(shiny)
library(bslib)

ui <- grid_page(
  layout = c(
    "header  header",
    "sidebar plots"
  ),
  row_sizes = c("50px", "1fr"),
  col_sizes = c("250px", "1fr"),
  grid_card_text("header", "This is my header"),
  grid_card(
    "sidebar",
    title = "Settings",
    sliderInput("bins","Number of bins:", 1, 50, 30, width = "100\%")
  ),
  grid_nested(
    "plots",
    title = "Plots - in technicolor",
    layout = c(
      "distPlot distPlot distPlot",
      "redPlot  bluePlot greenPlot"
    ),
    grid_plot("distPlot"),
    grid_plot("redPlot"),
    grid_plot("bluePlot"),
    grid_plot("greenPlot")
  )
)


drawHist <- function(nbins, color) {
  x <- faithful[, 2]
  bins <- seq(min(x), max(x), length.out = nbins + 1)
  hist(x, breaks = bins, col = color, border = "white")
}

server <- function(input, output) {
  output$distPlot <- renderPlot(drawHist(input$bins, "darkgray"))
  output$redPlot <- renderPlot(drawHist(input$bins, "orangered"))
  output$bluePlot <- renderPlot(drawHist(input$bins, "steelblue"))
  output$greenPlot <- renderPlot(drawHist(input$bins, "forestgreen"))
}

if(FALSE){
  shinyApp(ui, server)
}
}
\seealso{
\link{grid_card}, \link{grid_container}
}
