% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_css.R
\name{use_gridlayout_shiny}
\alias{use_gridlayout_shiny}
\title{Convert layout to css for Shiny}
\usage{
use_gridlayout_shiny(layout, ...)
}
\arguments{
\item{layout}{Either a markdown table representation (see
\code{\link{md_to_gridlayout}}) or a \code{gridlayout} object defining the
desired layout for your Shiny app.}

\item{...}{
  Arguments passed on to \code{\link[=to_css]{to_css}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
Character string of css used to setup grid layout and place elements
(referenced by id) into correct locations
}
\description{
This simply wraps the output of \code{to_css()} in a \code{style} tag and escapes HTML
characters to simplify using in Shiny. Most of the time you'll want to use
\code{\link{grid_page}} or \code{\link{grid_container}} instead of manually
adding this css though.
}
\examples{
# Only run these examples in interactive R sessions
if (interactive()) {

my_layout <- "
|      |        |         |
|------|--------|---------|
|2rem  |200px   |1fr      |
|100px |header  |header   |
|1fr   |sidebar |distPlot |"

# The classic Geyser app with grid layout
shinyApp(
  ui = fluidPage(
    use_gridlayout_shiny(my_layout, "app-container"),
    div(
      id = "app-container",
      div(id = "header",
          h2(id = "app-title", "Old Faithful Geyser Data")
      ),
      div(id = "sidebar",
          sliderInput("bins","Number of bins:",
                      min = 1, max = 50, value = 30)
      ),
      plotOutput("distPlot")
    )
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}
}
\seealso{
\code{\link{to_css}}, \code{\link{grid_page}}, \code{\link{grid_container}}
}
