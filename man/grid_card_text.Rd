% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_card_text.R
\name{grid_card_text}
\alias{grid_card_text}
\title{Grid-positioned card with only text}
\usage{
grid_card_text(
  area,
  content = NULL,
  ...,
  alignment = "start",
  img_height = "55px",
  icon = NULL,
  wrapping_tag = "h2",
  is_title = FALSE
)
}
\arguments{
\item{area}{Name of grid area, should match an area defined in the layout
section of the wrapping \code{grid_page()} or \code{grid_container()}.}

\item{content}{Whatever you want the title to say. Typically just text but
any tag or tag-list is possible. All will get wrapped in an \code{h3} tag.}

\item{...}{
  Arguments passed on to \code{\link[=grid_card]{grid_card}}
  \describe{
    \item{\code{title}}{Character string to go across top of panel with label. If left
blank the card contents will take up entire space.}
    \item{\code{collapsible}}{Should the card be able to be collapsed (\code{TRUE} or
\code{FALSE})? Gridlayout will only show collapser if the layout allows it
(panel is entirely positioned within "auto" sized rows, and has a title).
Setting this to \code{FALSE} will mean collapsibility of the panel will never be
enabled, regardless of layout.}
    \item{\code{scrollable}}{Should scroll-bars be added so content that is larger than
the panel can be seen?}
    \item{\code{class}}{Additional CSS classes to include on the card div.}
    \item{\code{item_gap}}{How much vertical space should there be between children of
card?}
    \item{\code{has_border}}{Should the card be surrounded by a border? Set to \code{FALSE}
to turn off.}
  }}

\item{alignment}{Horizontal alignment of text. Typical options include
\verb{start", "center", "end"}. For full list of options, see the \href{https://developer.mozilla.org/en-US/docs/Web/CSS/align-items}{css-spec for \code{align-items}.}}

\item{img_height}{If the passed icon is a path to an image, how tall should
that image be rendered (preserves aspect ratio.)}

\item{icon}{Optional icon/image for left of text. Supports image locations
(those ending in \verb{.png, .jpg, .jpeg} or \code{.svg}), ids of font-awesome icons
(i.e. that works with \verb{fontawesome::fa(icon)]}, or \code{fontawesome} icons as
returned by \code{\link[fontawesome:fa]{fontawesome::fa()}} (if customization of icon style is
desired.)}

\item{wrapping_tag}{What tag should the text be wrapped in. Takes either an
\code{htmltools} tag function or the string of a tag accessible via
\code{htmltools::tags[[wrapping_tag]]}.}

\item{is_title}{Should the text of this panel be passed on as the title of
the page? This will make the text show up in the browser tab or when you
bookmark the app etc..}
}
\description{
Makes a grid_card that contains just text that is vertically centered within
the panel. Useful for app titles or displaying text-based statistics.
}
\examples{

# Typically you'll just pass a character string to the function
grid_card_text(area = "header", "This is my header")

# Icons from `fontawesome` can be used:

# Either with just the id
grid_card_text(area = "header", "Here's my text", icon = "r-project")

# Or by directly passing the icon object if you want more customization
grid_card_text(
  "header",
  "Here's my text",
  icon = fontawesome::fa("r-project", fill = "steelblue")
)

# You can also pass arbitrary image locations for the icon
grid_card_text(
  "header",
  "Here's my text",
  icon = "https://cran.r-project.org/Rlogo.svg"
)

# These images can have their size controlled
grid_card_text(
  "header",
  "Here's my text",
  icon = "https://cran.r-project.org/Rlogo.svg",
  img_height = "20px"
)


# Commonly you may want to use the text panel text as the title of your app
grid_card_text(area = "header", "My App Name", is_title = TRUE)

if (FALSE) {
library(gridlayout)
library(shiny)
library(bslib)

shinyApp(
  ui = grid_page(
    layout = c(
      "header  header",
      "sidebar distPlot"
    ),
    row_sizes = c("50px", "1fr"),
    col_sizes = c("200px", "1fr"),
    grid_card_text("header", "This is my header"),
    grid_card(
      "sidebar",
      title = "Settings",
      sliderInput("bins","Number of bins:", 1, 50, 30, width = "100\%")
    ),
    grid_plot("distPlot")
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}
}
