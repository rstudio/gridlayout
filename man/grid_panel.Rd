% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_panel.R
\name{grid_panel}
\alias{grid_panel}
\title{Panel for grid page element}
\usage{
grid_panel(
  area,
  ...,
  v_align = NULL,
  h_align = NULL,
  title = NULL,
  use_card_styles = TRUE,
  use_bslib_card_styles = FALSE,
  collapsible = TRUE,
  scrollable = FALSE,
  panel_id = NULL,
  panel_class = make_panel_classes(use_card_styles, use_bslib_card_styles),
  padding = NULL
)
}
\arguments{
\item{area}{Name of grid area, should match an area defined in the layout
section of the wrapping \code{grid_page()} or \code{grid_container()}.}

\item{...}{Elements to include within the panel}

\item{v_align, h_align}{Vertical and Horizontal alignment of content in panel.
Options include \verb{"center", "start", "end", "stretch"}. These are a direct
mapping to the the \href{https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items}{css-spec for \code{justify-items}}
(=\code{h_align}) and
\href{https://developer.mozilla.org/en-US/docs/Web/CSS/align-items}{\code{align-items}}
(= \code{v_align}).}

\item{title}{Character string to go across top of panel with label. If left
blank the card contents will take up entire space.}

\item{use_card_styles}{Should the element contained in panel be made to look
like an enclosed card?}

\item{use_bslib_card_styles}{Should the card styles from bslib be used
instead of default \code{gridlayout} card styles? If this is set to \code{TRUE} it
will override \code{use_card_style}.}

\item{collapsible}{Should the card be able to be collapsed (\code{TRUE} or
\code{FALSE})? Gridlayout will only show collapser if the layout allows it
(panel is entirely positioned within "auto" sized rows, and has a title).
Setting this to \code{FALSE} will mean collapsibility of the panel will never be
enabled, regardless of layout.}

\item{scrollable}{Should scroll-bars be added so content that is larger than
the panel can be seen?}

\item{panel_id}{ID of \code{grid_panel} div. Usually this is automatically set by
\code{grid_page()} or \code{grid_container()}.}

\item{panel_class}{Class(es) of \code{grid_panel} div. Like \code{panel_id} this is
typically automatically generated and should only be touched in advanced
usage.}

\item{padding}{A valid css size that overrides the default of how much
spacing is around the card contents}
}
\value{
Elements from \code{...} wrapped in a \code{shiny::div()} with \code{class = "grid_panel"} and vertical/horizontal alignment css applied.
}
\description{
Allows you to customize the appearance of an element within your gridlayout.
When using \link{grid_page} or \link{grid_container} all items will be automatically
wrapped in this function with default values. However, if further
customization is needed you can do this wrapping yourself. Some examples of
things you can customize are settings a specific element to use a given card
style, or to align the content of the card vertically or horizontally.
}
\examples{

# Simply a wrapper for shiny::div(...)
grid_panel(
  area="header",
  shiny::h2("R"),
  v_align = "center",
  h_align = "center"
)

if (interactive()) {

library(gridlayout)
library(shiny)

# The classic Geyser app with grid layout
shinyApp(
  ui = grid_page(
    layout = "
      |2rem  |200px   |1fr    |
      |85px  |header  |header |
      |1fr   |sidebar |plot   |",
    grid_panel("header", h1("Geysers!")),
    grid_panel(
      "sidebar",
      title = "Settings",
      sliderInput("bins","Number of bins:", min = 1, max = 50, value = 30, width = "100\%")
    ),
    grid_panel(
      "plot",
      plotOutput("distPlot", height="100\%")
    )
  ),
  server = function(input, output) {
    output$distPlot <- renderPlot({
      x    <- faithful[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
    })
  }
)
}

}
\seealso{
\link{grid_panel_text}
}
