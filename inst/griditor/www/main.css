/* Styles for my app */
@font-face {
  font-family: "atkinson";
  src: url("./fonts/Atkinson-Hyperlegible-Regular-102a.woff2") format("woff2"),
       url("./fonts/Atkinson-Hyperlegible-Regular-102.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: "atkinson";
  src: url("./fonts/Atkinson-Hyperlegible-Bold-102a.woff2") format("woff2"),
       url("./fonts/Atkinson-Hyperlegible-Bold-102.woff") format("woff");
  font-weight: bold;
  font-style: normal;
}

@font-face {
  font-family: "atkinson";
  src: url("./fonts/Atkinson-Hyperlegible-Italic-102a.woff2") format("woff2"),
       url("./fonts/Atkinson-Hyperlegible-Italic-102.woff") format("woff");
  font-weight: normal;
  font-style: italic;
}

body {
  --side-gaps: 0.7rem;
  --blue: #007bff;
  --light-gray: #9e9e9e;
  --gray: #cecece;
  --dark-gray: #4f4f4f;
  --off-white: #efefef;
  --off-black: #2c2c2c;
  --edge-round: 5px;
  --element_roundness: 10px;
  font-family: "atkinson";
  display: grid;
  grid-template-columns: 300px 1fr 150px;
  grid-template-rows: 50px auto auto 1fr;
  grid-template-areas:
    "header       header header"
    "settings     editor editor"
    "instructions editor editor"
    "elements     editor editor";
  padding: var(--side-gaps);
  height: calc(100vh - 2*var(--side-gaps));
  grid-gap: var(--side-gaps);
  align-items: stretch;
  justify-items: stretch;
}

/* Styles that apply to every panel in grid */
body > *,
.modal {
  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
  padding: var(--side-gaps);
  border-radius: var(--edge-round);
}

h3 {
  margin: calc(-1 * var(--side-gaps)); /* Make header span top of boxes */
  background: var(--blue);
  padding: calc(0.75 * var(--side-gaps)) var(--side-gaps);
  border-radius: var(--edge-round) var(--edge-round) 0 0;
  color: white;
}

.card-body {
  margin-top: calc(2 * var(--side-gaps));
}

/* Makes icons lineup better with the text in headers */
h3 > svg {
  margin-bottom: -5px;
}

* {
  box-sizing: border-box;
}

img {
  max-width: 100%;
  max-height: 100%;
}

#header {
  grid-area: header;
  margin: 0;
  display: flex;
  justify-content: space-between;
}

#header > h2 {
  margin: 0;
}

#settings {
  grid-area: settings;
}

button.minus_btn.disabled {
  opacity: 0.2;
  cursor: not-allowed;
  pointer-events: none;
}

.plus_minus_input {
  display: grid;
  grid-template-columns: 1fr 1fr;
  justify-items: end;
  grid-gap: 1rem;
  padding: 0.5rem 1rem;
}

.plus_minus_input .controls{
  display: flex;
  justify-content: center;
}

.plus_minus_input .label {
  text-align: right;
}

.plus_minus_input .value {
  display: inline-block;
  width: 1.5rem;
  text-align: center;
  line-height: 25px;
}

.plus_minus_input button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 25px;
  height: 25px;
  color: var(--off-black);
}

.plus_minus_input svg {
  transform: scale(2);
}

#instructions {
  grid-area: instructions;
}


#elements {
  grid-area: elements;
}

#elements button.remove_el {
  background: white;
  border: none;
  cursor: pointer;
}

#editor {
  --browser-menu-height: 30px;
  --editor-radius: 10px;
  --outline-color: var(--light-gray);
  --editor-left-pad: 200px;
  --editor-bottom-pad: 100px;
  grid-area: editor;
  /* Leaves space for the row and column editing controls */
  padding-left: var(--editor-left-pad);
  padding-bottom: var(--editor-bottom-pad);
}

#editor-wrapper {
  border: 2px solid var(--outline-color);
  border-radius: var(--editor-radius);
  width: 100%;
  height: 100%;
  position: relative;
}

#editor-browser-header {
  height: var(--browser-menu-height);
  width: 100%;
  border-bottom: 2px solid var(--outline-color);
  border-radius: var(--editor-radius) var(--editor-radius) 0 0;
  background: var(--off-white);
}

#editor-browser-header text {
  font-family: 'Comic Neue', cursive;
  size: 12px;
}

#editor-browser-header circle {
  fill: var(--blue);
}

#grid_holder {
  --grid-gap: 1rem;
  --padding: 0.5rem;
  height: calc(100% - var(--browser-menu-height));
  position: absolute;
  width: 100%;
  display: grid;
  grid-gap: var(--grid-gap);
  top: var(--browser-menu-height);
  padding: var(--grid-gap);
}

.grid-cell {
  background: var(--off-white);
  border: 1px solid var(--gray);
  box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
  border-radius: var(--element_roundness);
}

.grid-cell.selected {
  background: currentColor;
  border: 2px solid var(--light-gray);
}

#grid_holder .added-element {
  background: none;
  /* pointer-events: none; So the cells beneath the elements can be selected still */
  position: relative;
}

/* Apply to both the list of elements and the elements in the grid itself */
.added-element {
  border-radius: var(--element_roundness);
  border-width: 3px;
  border-style: solid;
  transition: all .2s ease-in-out;
}

#added_elements .added-element {
  height: 35px;
  margin: 0 0 5px 0;
  padding: 0.65rem 1rem;
  display: flex; 
  justify-content: space-between;
  align-items: center;
}

#added_elements .added-element.hovered {
  /* Emphasize by making a bit bigger */
  transform: scale(1.05); 
}

#grid_holder .added-element.hovered,
#current_selection_box.added-element {
  border-width: 7px;
}

.added-element .dragger {
  --radius: 18px;
  font-size: 12px;
  position: absolute;
  height: var(--radius);
  width: var(--radius);
  cursor: grab;
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--off-white);
  opacity: 0.5;
}

.added-element .dragger > svg {
  transform: scale(0.85);
}

.added-element .dragger.top-left {
  top: -2px;
  left: -2px;
  cursor: nw-resize;
}
.added-element .dragger.bottom-right {
  bottom: -2px;
  right: -2px;
  cursor: se-resize;
}

.added-element .dragger.center {
  top: calc(50% - var(--radius)/2);
  right: calc(50% - var(--radius)/2);
  border-radius: var(--element_roundness);
  cursor: grab;
}
.added-element .dragger.center:active {
  cursor: grabbing;
}

.added-element .dragger i {
  display: inline-block;
}

.added-element .dragger.top-left i {
  transform: rotate(315deg);
}
.added-element .dragger.bottom-right i {
  transform: rotate(135deg);
}

.added-element .dragger.top-left,
.added-element .dragger.bottom-right {
  border-radius: var(--element_roundness) 0;
}


#current_selection_box.added-element {
  border-style: dashed;
  display: none;
  pointer-events: none;
}

.css-unit-input {
  display: grid;
  grid-gap: 5px;
  padding: var(--padding);
  pointer-events: none;
}

.css-unit-input > * {
  pointer-events: all;
}

.css-unit-input form {
  display: flex;
  flex-wrap: wrap;
}

.cols-controls {
  grid-row: -2 / -1;
  /* Place controls in middle of column */
  justify-self: center;
  align-items: flex-start;
  /* This is so when the columns are thin the unit selector sits to the right 
  side. When everything is on a single row it has no effect */
  position: absolute;
  top: calc(100% + var(--grid-gap));
  height: var(--editor-bottom-pad);
  width: 100%;
  
  grid-template-columns: 1rem 1fr 1rem;
  justify-items: center;
}

.css-unit-input.cols-controls form {
  grid-column: 2/3;
  justify-content: center;
}

.rows-controls {
  height: 100%;
  align-items: center;
  justify-content: flex-end;
  grid-column: 1 / 2;
  align-self: center;
  position: absolute;
  right: calc(100% + var(--grid-gap));
  width: var(--editor-left-pad);

  grid-template-rows: 1rem 1fr 1rem;
}  

.css-unit-input.rows-controls form {
  grid-row: 2/3;
}

.css-unit-input .css-dragger {
  height: 1rem;
  width: 1rem;
  text-align: center;
  display: block;
  cursor: grab;
  border: 1px solid var(--dark-gray);
  border-radius: 4px;
  font-size: 0.85rem;
  color: var(--off-black);

  /* background: steelblue; */
  /* outline: 1px solid red; */
  box-shadow: rgba(0, 0, 0, 0.06) 0px 2px 4px 0px inset;
  position: relative;
}

.css-dragger .detector {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background: steelblue;
  opacity: 0;
}

.css-unit-input .css-dragger:active {
  cursor: grabbing;
  /* opacity: 0; */
}

.rows-controls .css-dragger {
  grid-row: -1 / -2;
  width: 100%;
}

.cols-controls .css-dragger {
  grid-column: 2 / 3;
  width: 100%;
  max-width: 50px;
}



.background-blurrer {
  grid-column: 1 / -1;
  grid-row: 2 / -1;
  display: flex;
  align-items: center;
  justify-content: center;
  /* slightly transparent fallback */
  background-color: rgba(255, 255, 255, .8);
  z-index: 990;
}

/* if backdrop-filter support: make transparent and blurred */
@supports ((-webkit-backdrop-filter: blur(4px)) or (backdrop-filter: blur(4px))) {
  .background-blurrer {
    background-color: rgba(255, 255, 255, .05);
    -webkit-backdrop-filter: blur(4px);
    backdrop-filter: blur(4px);
  }
}

.background-blurrer .modal {
  width: 95%;
  max-width: 450px;
  background: white;
  z-index: 999;
  padding: 1.5rem 2.2rem;
}

form#name_form {
  display: flex;
  justify-content: space-evenly;
  margin-top: 2rem;
}
form#name_form input[type="text"] {
  width: 50%;
}

.radio-set-group {
  display: flex;
  justify-content: center;
  padding-top: 0.25rem;
  border-top: 1px solid var(--off-white);
}
.radio-set-group:first-child{
  border-top: none;
}

.radio-set-group > div {
  width: 50%;
}

.radio-set-label {
  text-align: right;
  padding-right: 1rem;
}
.notice-text{
  font-style: italic;
  font-weight: lighter;
  font-size: 0.9rem;
}

#delete_or_fix_list {
  outline: 1px solid var(--light-gray);
  padding: 0.5rem;
}

#drag_canvas {
  margin-left: calc(-1*var(--grid-gap));
  margin-top: calc(-1*var(--grid-gap));
  width: calc(100% + 2*var(--grid-gap));
  height: calc(100% + 2*var(--grid-gap));
  grid-row: 1/-1;
  grid-column: 1/-1;
  position: relative;
}

.drag-feedback-rect {
  pointer-events: none;
  position: absolute;
  background: linear-gradient(90deg, var(--dark-gray) 50%, transparent 50%), linear-gradient(90deg, var(--dark-gray) 50%, transparent 50%), linear-gradient(0deg, var(--dark-gray) 50%, transparent 50%), linear-gradient(0deg, var(--dark-gray) 50%, transparent 50%);
  background-repeat: repeat-x, repeat-x, repeat-y, repeat-y;
  background-size: 15px 4px, 15px 4px, 4px 15px, 4px 15px;
  animation: border-dance 16s infinite linear;
}

@keyframes border-dance {
  0% {
    background-position: 0 0, 100% 100%, 0 100%, 100% 0;
  }
  100% {
    background-position: 100% 0, 0 100%, 0 0, 100% 100%;
  }
}
